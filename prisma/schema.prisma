// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  phone         String?
  company       String?
  userType      UserType       @default(PERSONAL)
  profileImage  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  listings      Listing[]
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
  conversations    Conversation[]  @relation("UserConversations")
}

enum UserType {
  PERSONAL
  BUSINESS
}

model Listing {
  id          String        @id @default(uuid())
  title       String
  description String
  price       Float
  condition   Condition
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  material    MaterialType  @relation(fields: [materialId], references: [id])
  materialId  String
  images      String[]      @default([])
  location    String
  seller      User          @relation(fields: [sellerId], references: [id])
  sellerId    String
  conversations Conversation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Condition {
  NEW
  USED
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  listings    Listing[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MaterialType {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  listings    Listing[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Conversation {
  id        String    @id @default(uuid())
  users     User[]    @relation("UserConversations")
  messages  Message[]
  listingId String?
  listing   Listing?  @relation(fields: [listingId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(uuid())
  content        String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
